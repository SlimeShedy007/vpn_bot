import asyncio
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–∞
class BrandConfig:
    NAME = "üîí VPN Guardian"
    TAGLINE = "–í–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å"
    COLORS = {
        "primary": "#6e48aa",
        "secondary": "#00b4db",
        "dark": "#0f0c29",
        "light": "#f8f9fa"
    }
    DESCRIPTION = """
üõ°Ô∏è <b>–ü—Ä–µ–º–∏—É–º VPN —Å –≤–æ–µ–Ω–Ω–æ–π —à–∏—Ñ—Ä–æ–≤–∫–æ–π</b>
üåç 50+ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ 20 —Å—Ç—Ä–∞–Ω–∞—Ö
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 1 –ì–±–∏—Ç/—Å
ü§ñ –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
"""
    WELCOME_TEXT = f"""
<b>{NAME}</b> - {TAGLINE}

{DESCRIPTION}

üìå <i>–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</i>
‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —Å–µ—Ä—Ñ–∏–Ω–≥ –±–µ–∑ —Å–ª–µ–¥–æ–≤
‚Ä¢ –û–±—Ö–æ–¥ –ª—é–±—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
‚Ä¢ 256-bit AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ó–∞—â–∏—Ç–∞ –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö
"""

API_TOKEN = '7143801443:AAEBG6BRDI5ae7P7S0URS414T14aHONbyWE'
SUPPORT_ID = '@serhiobk'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML,
        link_preview_is_disabled=True
    )
)

dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ —Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
def generate_keyboard():
    builder = InlineKeyboardBuilder()
    buttons = [
        ("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "pay"),
        ("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—â–∏—Ç—É", "check"),
        ("üåç –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä", "servers"),
        ("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", "key"),
        ("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "instruction"),
        ("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", f"url:https://t.me/{SUPPORT_ID.lstrip('@')}")
    ]
    
    for text, data in buttons:
        if data.startswith("url:"):
            builder.button(text=text, url=data[4:])
        else:
            builder.button(text=text, callback_data=data)
    
    builder.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()

@router.message(commands=['start', 'help'])
async def send_welcome(message: Message):
    await message.answer_photo(
        photo="https://i.imgur.com/9zQ4W8j.png",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –ª–æ–≥–æ—Ç–∏–ø–∞
        caption=BrandConfig.WELCOME_TEXT,
        reply_markup=generate_keyboard()
    )

@router.callback_query(lambda c: c.data == "pay")
async def process_pay(callback: types.CallbackQuery):
    text = (
        "üí≥ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "üîπ <i>200‚ÇΩ –Ω–∞ 30 –¥–Ω–µ–π</i>\n"
        "üî∏ <i>500‚ÇΩ –Ω–∞ 90 –¥–Ω–µ–π (—ç–∫–æ–Ω–æ–º–∏—è 16%)</i>\n\n"
        "üì± <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
        "–°–ë–ü: <code>+79061800102</code>\n"
        "–ö—Ä–∏–ø—Ç–æ: BTC/ETH/USDT\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    )
    await callback.message.edit_text(text, reply_markup=generate_keyboard())
    await callback.answer()

@router.callback_query(lambda c: c.data == "check")
async def process_check(callback: types.CallbackQuery):
    status = (
        "üõ°Ô∏è <b>–°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã</b>\n\n"
        "üîí <i>–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:</i> <b>–∞–∫—Ç–∏–≤–Ω–æ</b> (AES-256)\n"
        "üåê <i>–°–µ—Ä–≤–µ—Ä:</i> <b>#GER-12</b> (–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç)\n"
        "‚è± <i>–ü–∏–Ω–≥:</i> <b>24ms</b>\n"
        "üì∂ <i>–°–∫–æ—Ä–æ—Å—Ç—å:</i> <b>78 –ú–±–∏—Ç/—Å</b>\n\n"
        "üü¢ <u>–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</u>"
    )
    await callback.message.edit_text(status, reply_markup=generate_keyboard())
    await callback.answer()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (servers, key, instruction) –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
