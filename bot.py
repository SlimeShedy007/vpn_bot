from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta

API_TOKEN = '7143801443:AAHNzs17FTEDCyKwHX7URFDONJ2Px5WrlN0'
ADMIN_ID = 342674896
VPN_SUBSCRIPTION_LINK = 'https://s.creati.win/sub/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzNDI2NzQ4OTYifQ.wVunTH7ngB4dwqrBbUq5qT6UBpRUUSZP5JrCKAqoGQw#‚ú®SiriusVPN'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

users = {}  # user_id: expire_date

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
    KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
)
main_menu.add(
    KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"),
    KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
)
main_menu.add(
    KeyboardButton("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"),
    KeyboardButton("–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
)

instruction_menu = ReplyKeyboardMarkup(resize_keyboard=True)
instruction_menu.add(
    KeyboardButton("–î–ª—è Android"),
    KeyboardButton("–î–ª—è iPhone"),
)
instruction_menu.add(
    KeyboardButton("–ù–∞–∑–∞–¥"),
)

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!", reply_markup=main_menu)

@dp.message_handler(lambda msg: msg.text == "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def pay_sub(message: types.Message):
    await message.answer("–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 200‚ÇΩ –ø–æ –°–ë–ü –Ω–∞ –Ω–æ–º–µ—Ä:\n\n"
                         "+79061800102 (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n\n"
                         "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ /activate")

@dp.message_handler(commands=['activate'])
async def activate_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    target_id = message.reply_to_message.from_user.id if message.reply_to_message else message.from_user.id
    users[target_id] = datetime.now() + timedelta(days=30)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ø–æ–ª—É—á–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π.")

@dp.message_handler(lambda msg: msg.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def check_sub(message: types.Message):
    expire = users.get(message.from_user.id)
    if expire:
        days_left = (expire - datetime.now()).days
        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

@dp.message_handler(lambda msg: msg.text == "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á")
async def get_key(message: types.Message):
    expire = users.get(message.from_user.id)
    if expire and expire > datetime.now():
        await message.answer(f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{VPN_SUBSCRIPTION_LINK}")
    else:
        await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")

@dp.message_handler(lambda msg: msg.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
async def list_servers(message: types.Message):
    await message.answer("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n1. üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã\n2. üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è\n3. üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è\n4. üá∏üá¨ –°–∏–Ω–≥–∞–ø—É—Ä")

@dp.message_handler(lambda msg: msg.text == "–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: tg://user?id=342674896")

@dp.message_handler(lambda msg: msg.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instruction(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=instruction_menu)

@dp.message_handler(lambda msg: msg.text == "–î–ª—è Android")
async def android_instruction(message: types.Message):
    await message.answer(f"1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayTun –∏–∑ Play Market\n"
                         f"2. –ù–∞–∂–º–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç' –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:\n{VPN_SUBSCRIPTION_LINK}")

@dp.message_handler(lambda msg: msg.text == "–î–ª—è iPhone")
async def iphone_instruction(message: types.Message):
    await message.answer(f"1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streisand –∏–∑ App Store\n"
                         f"2. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:\n{VPN_SUBSCRIPTION_LINK}")

@dp.message_handler(lambda msg: msg.text == "–ù–∞–∑–∞–¥")
async def back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

if __name__ == '__main__':
    executor.start_polling(dp)
