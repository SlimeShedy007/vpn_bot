import asyncio
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

API_TOKEN = '7143801443:AAEBG6BRDI5ae7P7S0URS414T14aHONbyWE'
ADMIN_ID = 34267896
SUPPORT_USERNAME = '@serhiobk'
VPN_LINK = "https://s.creati.win/sub/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzNDI2NzQ4OTYifQ.wVunTH7ngB4dwqrBbUq5qT6UBpRUUSZP5JrCKAqoGQw#%E2%9C%A8SiriusVPN"

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

@router.message()
async def handle_all_messages(message: Message):
    if message.text == "/start":
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data="main_menu")
        await message.answer(
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SiriusVPN</b>\n"
            "–ù–∞–¥—ë–∂–Ω—ã–π VPN-–¥–æ—Å—Ç—É–ø –≤ –æ–¥–Ω–æ –∫–∞—Å–∞–Ω–∏–µ.",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

@router.callback_query(lambda c: c.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="1Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay")
    builder.button(text="2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check")
    builder.button(text="3Ô∏è‚É£ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME.lstrip('@')}")
    builder.button(text="4Ô∏è‚É£ –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="servers")
    builder.button(text="5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data="key")
    builder.button(text="6Ô∏è‚É£ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
    builder.adjust(1)

    await callback.message.answer(
        "<b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "pay")
async def pay_subscription(callback: types.CallbackQuery):
    await callback.message.answer(
        "<b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        "–°–ë–ü (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n"
        "–ù–æ–º–µ—Ä: <code>+79061800102</code>\n"
        "–°—É–º–º–∞: 200‚ÇΩ / 30 –¥–Ω–µ–π"
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "check")
async def check_sub(callback: types.CallbackQuery):
    await callback.message.answer(
        "<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n–û—Å—Ç–∞–ª–æ—Å—å: <code>30 –¥–Ω–µ–π</code> (–∑–∞–≥–ª—É—à–∫–∞)"
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "servers")
async def servers(callback: types.CallbackQuery):
    await callback.message.answer(
        "<b>–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:</b>\n"
        "üá∫üá∏ USA\n"
        "üá©üá™ Germany\n"
        "üá∑üá∫ Russia\n"
        "üáØüáµ Japan"
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "key")
async def get_key(callback: types.CallbackQuery):
    await callback.message.answer(
        f"<b>–í–∞—à VPN-–∫–ª—é—á:</b>\n\n<code>{VPN_LINK}</code>"
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "instruction")
async def show_instruction(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üì± –î–ª—è Android", callback_data="android_instr")
    builder.button(text="üì± –î–ª—è iPhone", callback_data="iphone_instr")
    builder.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data == "android_instr")
async def android_instr(callback: types.CallbackQuery):
    await callback.message.answer(
        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:</b>\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ <b>V2RayTun</b> –∏–∑ Google Play\n"
        "2. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á'\n"
        "3. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'"
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "iphone_instr")
async def iphone_instr(callback: types.CallbackQuery):
    await callback.message.answer(
        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iPhone:</b>\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ <b>Streisand</b> –∏–∑ App Store\n"
        "2. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á'\n"
        "3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å"
    )
    await callback.answer()

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
